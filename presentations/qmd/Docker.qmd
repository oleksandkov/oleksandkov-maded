---
title: "Docker and Containers"
format: 
  revealjs:
    theme: dark
    footer: "By oleksandkov"
    chalkboard: true
    slideNumber: true
    transition: fade
    controls: true
    center: true
---

## Що таке контейнер?

### Чому це корисно? {.fragment}

### Яка різниця між GitHub та Docker? {.fragment}

---

## Що таке Docker?

::: {.panel}
**Docker** Це платформа для розробки, доставки та запуску додатків у контейнерах.
![Docker Logo](images/docker.png)
::: 

---

## Що таке контейнер?

Контейнер - це окрема віртуальна машина, яка містить все необхідне для запуску програми: код, бібліотеки, залежності та налаштування. Вона знаходитться на машині користувача, має окрему операційну систему, але використовує ресурси хост-машини (процесор, пам'ять, диск).

---

::: {.column width="50%"}
**Особливості контейнера**

- Власна ОС
- Власні бібліотеки
- Власні залежності
- Власні налаштування
- легко переноситься
:::
::: {.column width="50%"}
![](images/docker_container_layers.png)
:::




::: {.panel .panel-success}
# Контейнер == "міні" віртуальна машина (такий як Windows, Linux, MacOS)
:::


# Чому це корисно?

**Головна проблема комунікації розробників це:**
 
<div class="fragment">
  - "На моєму комп'ютері працює, сподіваюся, що у тебе теж"
</div>
<div class="fragment">
  - "В мене не запускається, бо в мене інша версія Python"
</div>
<div class="fragment">
  - "В мене не запускається бо маю Mac"
</div>

# Рішення

Якщо всі будуть мати однакове середовище, то проблем не буде.

<div class="fragment">
**Питання:** як це зробити?
</div>


# Рішення 1

Встановлювати всі залежності вручну і контролювати версії пакетів, бібліотек один одного.
<div class="fragment">

  **- Складно**

  **- Різні ОС**

  **- Різні версії**

  **- Важко підтримувати**

</div>

# Рішення 2

Використовувати пакети, що спрощують встановлення залежностей, наприклад, `requirements.txt` для Python або `renv` для R.

:::{.columns}

::: {.column width="50%" .fragment}

- Важко встановити

- Важко підтримувати

- Багато пакетів для різних мов

- Охоплює не всі залежності

:::

::: {.column width="50%" .fragment}



- Встановлюю більшість залежностей

- Працює на своїй ОС


:::
:::

# Рішення 3
Використовувати контейнери, наприклад, `Docker`.

:::{.columns}

::: {.column width="50%" .fragment}


- Потребує місце на диску

- Потребує ресурси (CPU, RAM)

- Потрібно вивчити базові команди

:::

::: {.column width="50%" .fragment}



- Встановлює всі залежності

- Працює на власній ОС, тому байду яка ОС у користувача

- Легко переноситься

- Повне налаштування середовища


:::
:::

# Як працює Docker?

![](images/Docker-example-1.jpg)


## Dockerfile - інструкції для створення image (образу)

Dockerfile - це будь-який текстовий файл, який читає Docker для створення образу (image). Він містить усі інструкції, по типу: 

- Яка ОС

- Які залежності

- Які файли входять до контейнера

<div class="fragment">

***DOCKERFILE - це рецепт створення образу (image)*** 
</div>

## Docker Image - це шаблон (шаблонна віртуальна машина)
Docker Image - це шаблон (шаблонна віртуальна машина), який створюється на основі інструкцій з Dockerfile. В цьому документу є інструкції по будуванні контейнера, але вже у форматі команд, що не розуміє людина, а розуміє Docker.

<div class="fragment">

***IMAGE - це шаблон віртуальної машини або інструкція для створення контейнера***

</div>

## Docker Container - це запущений образ (image)
Docker Container - це запущений образ (image). Це вже повноцінна віртуальна машина, яка працює на вашому комп'ютері. Вона має власну ОС, бібліотеки, залежності та налаштування.

<div class="fragment">

***CONTAINER - це запущений образ (image) або віртуальна, що готова до роботи***

</div>

---

## Що потрібно для початку?

<div class="fragment">
- Встановити Docker Desktop з [офіційного сайту](https://www.docker.com/products/docker-desktop)
</div>
<div class="fragment">
- Зареєструватися на [Docker Hub](https://hub.docker.com) для зберігання своїх образів (image) або їх завантаження
</div>
<div class="fragment">
- Завантажити будь-який образ (image) з Docker Hub або створити свій власний за допомогою Dockerfile

</div>
---

## Базові команди Docker

<div class="fragment">
```{.bash}
docker pull <image_name>      # Завантажити образ (image) з Docker Hub
```
</div>
<div class="fragment">
```{.bash}
docker images                 # Показати всі завантажені образи 
```
</div>
<div class="fragment">
```{.bash}
docker run -it <image_name>   # Запустити контейнер з образом (image)
```
</div>
<div class="fragment">
```{.bash}
docker ps                     # Показати всі запущені контейнери
```
</div>
<div class="fragment">
```{.bash}
docker build -t <image_name> .   # Створити власний образ (image) з Dockerfile що знаходиться в поточній папці
```
</div>
---

## Варто пам'ятати що Docker це один з інструментів для роботи з контейнерами, є й інші, наприклад:

- Podman
- Kubernetes
- OpenShift
- AWS ECS